# Verificación de modo de lenguaje
if ($ExecutionContext.SessionState.LanguageMode -ne "FullLanguage") {
    Write-Host "`n[ERROR] PowerShell no está en modo Full Language" -ForegroundColor Red
    Write-Host "Este script requiere permisos elevados y modo no restringido."
    Write-Host "Solución: Ejecutar como Administrador y revisar políticas de ejecución"
    Write-Host "Más información: https://massgrave.dev/fix_powershell`n" -ForegroundColor Cyan
    pause
    exit
}

# Configuración de seguridad
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Tls13

# Configuración personalizable
$config = @{
    DownloadPath = [System.IO.Path]::Combine($env:USERPROFILE, "Downloads\DescargasApps")  # Cambio en la ruta
    MaxRetries = 3
    Downloads = @(
        @{Name = "Office"; URL = "https://c2rsetup.officeapps.live.com/c2r/download.aspx?ProductreleaseID=O365ProPlusRetail&platform=x64&language=es-es&version=O16GA"; FileName = "OfficeSetup.exe"},
        @{Name = "Photoshop"; URL = "https://store8.gofile.io/download/web/4afdf269-c6d4-4652-bcb9-15ef56772dfb/AP2025.v26.0.x64.ZDescargasORG.rar"; FileName = "AP2025.v26.0.x64.ZDescargasORG.rar"}
    )
}

# Función para verificar si la URL es válida
function IsValidUrl {
    param([string]$url)
    try {
        $uri = New-Object System.Uri($url)
        return $uri.Scheme -in @('http', 'https')
    }
    catch {
        return $false
    }
}

# Función para obtener el nombre del archivo automáticamente desde la URL
function Get-FileNameFromUrl {
    param([string]$url)
    return [System.IO.Path]::GetFileName($url)
}

# Función de descarga mejorada
function Download-File {
    param(
        [string]$URL
    )
    
    # Obtener el nombre del archivo automáticamente desde la URL
    $FileName = Get-FileNameFromUrl -url $URL
    $output = Join-Path $config.DownloadPath $FileName
    $retryDelay = 5  # Tiempo de espera inicial entre reintentos
    
    try {
        # Verificar si la URL es válida
        if (-not (IsValidUrl $URL)) {
            Write-Host "La URL proporcionada no es válida." -ForegroundColor Red
            return $false
        }

        for ($i = 0; $i -le $config.MaxRetries; $i++) {
            try {
                Write-Host "`nDescargando $FileName..." -ForegroundColor Cyan
                $ProgressPreference = 'SilentlyContinue'
                
                # Configuración de cabeceras HTTP para simular un navegador
                $headers = @{
                    "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                }
                
                # Mostrar barra de progreso
                $totalSize = 0
                $response = Invoke-WebRequest -Uri $URL -Method Head -Headers $headers -UseBasicParsing
                $totalSize = $response.Headers['Content-Length']
                $progress = 0

                # Intento de descarga
                $response = Invoke-WebRequest -Uri $URL -OutFile $output -Headers $headers -UseBasicParsing

                # Actualizar barra de progreso
                while ($progress -lt 100) {
                    $progress = (Get-Item $output).Length / $totalSize * 100
                    Write-Progress -PercentComplete $progress -Status "Descargando..." -Activity "$FileName"
                    Start-Sleep -Seconds 1
                }

                Write-Host "Descarga exitosa: $output" -ForegroundColor Green
                return $true
            }
            catch {
                Write-Host "Intento $($i+1) fallido, esperando $($retryDelay) segundos antes de reintentar..." -ForegroundColor Yellow
                Start-Sleep -Seconds $retryDelay
                $retryDelay *= 2  # Aumentar el tiempo de espera (exponencial)
            }
        }
        return $false
    }
    catch {
        Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "Tipo de error: $($_.Exception.GetType().FullName)" -ForegroundColor Red
        Write-Host "Rastro de pila: $($_.Exception.StackTrace)" -ForegroundColor Red
        return $false
    }
    finally {
        $ProgressPreference = 'Continue'
    }
}

# Menú interactivo
function Show-AdvancedMenu {
    Clear-Host
    Write-Host "`n════════════════════════════════════" -ForegroundColor Magenta
    Write-Host "        MENÚ PRINCIPAL v2.1" -ForegroundColor White
    Write-Host "════════════════════════════════════" -ForegroundColor Magenta
    for ($i = 0; $i -lt $config.Downloads.Count; $i++) {
        Write-Host "$($i+1). Descargar $($config.Downloads[$i].Name)"
    }
    Write-Host "$($config.Downloads.Count+1). Salir"
    Write-Host "════════════════════════════════════`n" -ForegroundColor Magenta
}

# Bucle principal
while ($true) {
    Show-AdvancedMenu
    $selection = Read-Host "Seleccione una opción"
    
    switch ($selection) {
        "1" {
            $office = $config.Downloads | Where-Object { $_.Name -eq "Office" }
            if (Download-File -URL $office.URL) {
                Write-Host "`n¿Desea abrir la carpeta? (S/N)" -ForegroundColor Cyan
                if ((Read-Host) -eq 'S') { Invoke-Item $config.DownloadPath }
            }
        }
        "2" {
            $photoshop = $config.Downloads | Where-Object { $_.Name -eq "Photoshop" }
            if (Download-File -URL $photoshop.URL) {
                Write-Host "`n¿Desea abrir la carpeta? (S/N)" -ForegroundColor Cyan
                if ((Read-Host) -eq 'S') { Invoke-Item $config.DownloadPath }
            }
        }
        "3" {
            exit
        }
        default {
            Write-Host "Opción inválida" -ForegroundColor Red
        }
    }
    
    Write-Host "`nPresione Enter para continuar..."
    [Console]::ReadLine()
}

# Verificación de modo de lenguaje
if ($ExecutionContext.SessionState.LanguageMode -ne "FullLanguage") {
    Write-Host "`n[ERROR] PowerShell no está en modo Full Language" -ForegroundColor Red
    Write-Host "Este script requiere permisos elevados y modo no restringido."
    Write-Host "Solución: Ejecutar como Administrador y revisar políticas de ejecución"
    Write-Host "Más información: https://massgrave.dev/fix_powershell`n" -ForegroundColor Cyan
    pause
    exit
}

# Configuración de seguridad
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12, [Net.SecurityProtocolType]::Tls13

# Configuración personalizable
$config = @{
    DownloadPath = "$env:TEMP\DescargasApps"
    MaxRetries = 2
    Downloads = @(
        @{Name = "Office"; URL = "https://drive.google.com/uc?export=download&id=1EVm2IT_4lkfeyvqxANg-jLbpOyqdBSwe"; FileName = "exm1.zip"},
        @{Name = "Photoshop"; ID = "16NDQjfFl2Mmt2TrrN0kApjEEc2Mtld6F"; FileName = "Photoshop.zip"},
        @{Name = "Activador Office"; ID = "GD_ACT_OFFICE_ID"; FileName = "ActivadorOffice.exe"},
        @{Name = "Activador Photoshop"; ID = "GD_ACT_PHOTOSHOP_ID"; FileName = "ActivadorPhotoshop.exe"}
    )
    ActivationHashes = @{
        MAS_AIO = '16F0FFCDD242A0D514B9D96AE1535F48A2E2811D45A8094E98BB0A26EA2FEBBA'
    }
}

# Inicialización de entorno
if (-not (Test-Path $config.DownloadPath)) {
    New-Item -Path $config.DownloadPath -ItemType Directory | Out-Null
}

# Función de descarga mejorada
function Download-File {
    param(
        [string]$URL,
        [string]$FileName
    )
    
    $output = Join-Path $config.DownloadPath $FileName
    
    try {
        for ($i = 0; $i -le $config.MaxRetries; $i++) {
            try {
                Write-Host "`nDescargando $FileName..." -ForegroundColor Cyan
                $ProgressPreference = 'SilentlyContinue'
                
                # Manejo especial para Google Drive
                if ($URL -match "drive\.google\.com") {
                    $response = Invoke-WebRequest -Uri $URL -SessionVariable session -UseBasicParsing
                    
                    # Si es un archivo grande, obtener el link de confirmación
                    if ($response.Headers['Content-Disposition'] -match 'filename=".*"') {
                        Invoke-WebRequest -Uri $URL -WebSession $session -UseBasicParsing -OutFile $output
                    } else {
                        $confirmURL = ($response.Links | Where-Object outerHTML -Match "confirm=").href
                        Invoke-WebRequest -Uri $confirmURL -WebSession $session -UseBasicParsing -OutFile $output
                    }
                } else {
                    Invoke-WebRequest -Uri $URL -UseBasicParsing -OutFile $output
                }
                
                if (Test-Path $output) {
                    Write-Host "Descarga exitosa: $output" -ForegroundColor Green
                    return $true
                }
            }
            catch {
                Write-Host "Intento $($i+1) fallido: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        return $false
    }
    finally {
        $ProgressPreference = 'Continue'
    }
}

# Menú interactivo
function Show-AdvancedMenu {
    Clear-Host
    Write-Host "`n════════════════════════════════════" -ForegroundColor Magenta
    Write-Host "        MENÚ PRINCIPAL v2.1" -ForegroundColor White
    Write-Host "════════════════════════════════════" -ForegroundColor Magenta
    for ($i = 0; $i -lt $config.Downloads.Count; $i++) {
        Write-Host "$($i+1). Descargar $($config.Downloads[$i].Name)"
    }
    Write-Host "$($config.Downloads.Count+1). Activar Windows/Office"
    Write-Host "$($config.Downloads.Count+2). Abrir carpeta de descargas"
    Write-Host "$($config.Downloads.Count+3). Salir"
    Write-Host "════════════════════════════════════`n" -ForegroundColor Magenta
}

# Bucle principal
while ($true) {
    Show-AdvancedMenu
    $selection = Read-Host "Seleccione una opción"
    
    switch ($selection) {
        "1" {
            $office = $config.Downloads | Where-Object { $_.Name -eq "Office" }
            if (Download-File -URL $office.URL -FileName $office.FileName) {
                Write-Host "`n¿Desea abrir la carpeta? (S/N)" -ForegroundColor Cyan
                if ((Read-Host) -eq 'S') { Invoke-Item $config.DownloadPath }
            }
        }
        "2" {
            # Lógica para Photoshop
        }
        "3" {
            # Lógica para Activador Office
        }
        "4" {
            # Lógica para Activador Photoshop
        }
        "5" {
            # Lógica para activación
        }
        "6" {
            Invoke-Item $config.DownloadPath
        }
        "7" {
            exit
        }
        default {
            Write-Host "Opción inválida" -ForegroundColor Red
        }
    }
    
    Write-Host "`nPresione Enter para continuar..."
    [Console]::ReadLine()
}

# Abrir cmd al finalizar
Start-Process cmd.exe
